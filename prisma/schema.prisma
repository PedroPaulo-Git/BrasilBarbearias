// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  name           String
  isAdmin        Boolean  @default(false)
  shops          Shop[]
  subscriptions  Subscription[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("owners")
}

model Shop {
  id           String        @id @default(cuid())
  name         String
  slug         String        @unique
  address      String?
  openTime     String        // Format: "HH:MM"
  closeTime    String        // Format: "HH:MM"
  serviceDuration Int        @default(60) // Duration in minutes
  
  // New optional fields
  description   String?
  galleryImages String[]      @default([])
  instagramUrl  String?
  whatsappUrl   String?
  mapUrl        String?
  rating        Float?        // Admin-set rating

  ownerId      String
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]

  @@map("shops")
}

model Appointment {
  id           String   @id @default(cuid())
  shopId       String
  shop         Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  clientName   String
  clientContact String  // Email or phone
  date         DateTime
  status       String   @default("pending") // pending, confirmed, cancelled, completed
  createdAt    DateTime @default(now())

  //  @@unique([shopId, date])Prevent double booking
  @@map("appointments")
}

model Plan {
  id            String    @id
  name          String    @unique // "Básico", "Intermediário", "Avançado"
  price         Float
  shopLimit     Int
  createdAt     DateTime  @default(now())
  subscriptions Subscription[]
}

model Subscription {
  id                        String    @id @default(cuid())
  userId                    String
  planId                    String
  status                    String    // e.g., "active", "canceled", "expired", "unpaid"
  currentPeriodStart        DateTime?
  currentPeriodEnd          DateTime?
  mercadoPagoSubscriptionId String?   @unique
  mercadoPagoPreferenceId   String?   @unique
  mercadoPagoPaymentId      String?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])
}
